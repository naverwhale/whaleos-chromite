# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from chromite.contrib.sdk_server.poc.josepp import range_pb2 as range__pb2


class RangeServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.GetRange = channel.unary_stream(
            "/RangeService/GetRange",
            request_serializer=range__pb2.RangeRequest.SerializeToString,
            response_deserializer=range__pb2.RangeResponse.FromString,
        )


class RangeServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def GetRange(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RangeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetRange": grpc.unary_stream_rpc_method_handler(
            servicer.GetRange,
            request_deserializer=range__pb2.RangeRequest.FromString,
            response_serializer=range__pb2.RangeResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "RangeService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
